
Question 1:
  
  Diagram 1:

  {parent}
     ||
    n=4->i=1->fork->break->printf->sleep 
               ||
            {child1}
               ||
              i=2->fork->break->printf->sleep
                    ||
                 {child2}
                    ||
                   i=3->fork->break->printf->sleep
                         ||
                      {child3}
                         ||
                        i=4->printf->sleep
  Diagram 2:

  parent
    |
  child1
    |
  child2
    |
  child3     

  4 (value  of argv[1]) process are created (1 parent, 3 children). As shown
  in the above diagrams The parent, upon entering the for loop, forks a child,
  and then, due to the if statement, breaks out of the for loop. The first
  child process continues in the for loop. It forks the second child and then
  breaks out of the for loop. The second child continues in the loop and forks
  the third child before breaking out of the loop. The third child exits the
  loop as i is no longer less than n. After the for loop, the parent and each
  child prints its id as well as its parents id and then sleeps before exiting.

Question 2:

  Diagram 1:

  {parent}
     ||
    n=4->i=0->fork->i=1->fork->i=2->fork->i=3->fork->printf->sleep
               ||         ||         ||         ||
               ||         ||         ||      {child4}
               ||         ||         ||         ||
               ||         ||      {child3}    break->printf->sleep
               ||         ||         ||
               ||      {child2}    break->printf->sleep
               ||         ||
            {child1}    break->printf->sleep
               ||
              break->printf->sleep


  Diagram 2:
  
             Parent
               |
    -----------------------
    |      |       |      |
  Child1 Child2 Child3 Child4

  5 process are created (1 parent, 4 children). All four children are created
  by the same parent. Non of the children have children of their own. As shown
  in the diagrams, the parent enters the for loop and fork child1. Child1 then
  exits the for loop. The parent remains in the loop and repeats the cycle 3
  more times before exiting the loop when i is no longer less than n. Each of
  the four children and the parent print their id and their parents id after
  exiting the loop. Then every process sleeps before exiting.

Question 3:

  Diagram:
  
            Parent
              |
    -------------------
    |      |         |
    |      |       Child1        i=0
    |      |         |
    |      |      --------
    |      |      |      |
    |    Child2   |    Child3    i=1
    |      |      |      |
  Child4 Child5 Child6 Child7    i=2

  8 process are created (1 parent, 7 children). The parent enters the for loop
  with i=0 and forks child 1. No process exit the loop. Parent and child1 loop
  with i=1. The parent forks child 2 and child 1 forks child3. No process exits
  the loop. Parent and children 1-3 loop with i=2. The parent forks child 4, 
  child2 forks child5, child1 forks child6, and child3 forks child7. All
  processes exit the loop as i=3. Each of the 7 children and the parent
  print their id and their parents id after exiting the loop. Then every
  process sleeps before exiting.

Question 4:

  The approximation of e drops to 1 due to the limited precision of doubles.
  The approx. is equal to (1+1/i)^i. Eventually, i becomes so great* that the
  term 1/i is too small to be represented as a double and becomes 0. At this
  point, (1+1/i)^i becomes 1^i, which will equal 1 for any positive integer i.

  *This point is not definite because the precision of a double is not the same
   on all systems. As a minimum, a double should have 15 digits of precision.

